name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Force clean install
        run: |
          echo "Removing existing package files..."
          rm -f package-lock.json
          rm -rf node_modules
          echo "Installing only essential dependencies..."
          npm install next react react-dom framer-motion @radix-ui/react-dialog @radix-ui/react-slot
          npm install --save-dev typescript @types/react @types/node @types/react-dom tailwindcss postcss autoprefixer
          echo "Generating package lock..."
          npm install --package-lock-only
      
      - name: Build
        run: |
          echo "Building Next.js app..."
          npx next build
      
      - name: Run fix-asset-paths
        run: |
          echo "Creating fix-asset-paths.js if not existing..."
          if [ ! -f fix-asset-paths.js ]; then
            cat > fix-asset-paths.js << 'EOL'
const fs = require('fs');
const path = require('path');

// Output directory
const outDir = './out';

// Process a specific HTML file
function processHtmlFile(filePath) {
  try {
    console.log(`Processing ${filePath}`);
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // Fix _next paths (remove leading slash)
    content = content.replace(/(['"])(\/_next\/)/g, '$1_next/');
    content = content.replace(/src="\/_next\//g, 'src="_next/');
    content = content.replace(/href="\/_next\//g, 'href="_next/');
    
    // Ensure images paths have consistent format (no leading slash)
    content = content.replace(/(['"])\/images\//g, '$1images/');
    
    // Fix links to videos
    content = content.replace(/(['"])\/videos\//g, '$1videos/');
    
    // Writing back the fixed content
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`Successfully processed ${filePath}`);
    return true;
  } catch (error) {
    console.error(`Error processing ${filePath}:`, error);
    return false;
  }
}

// Main function to process all HTML files in the output directory
function fixPaths() {
  try {
    console.log(`Starting path fixing in ${outDir}`);
    
    // Find all HTML files
    function findHtmlFiles(dir) {
      let results = [];
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          results = results.concat(findHtmlFiles(filePath));
        } else if (file.endsWith('.html')) {
          results.push(filePath);
        }
      }
      
      return results;
    }
    
    const htmlFiles = findHtmlFiles(outDir);
    console.log(`Found ${htmlFiles.length} HTML files`);
    
    let successCount = 0;
    for (const file of htmlFiles) {
      if (processHtmlFile(file)) {
        successCount++;
      }
    }
    
    console.log(`Path fixing completed! Successfully processed ${successCount} files.`);
  } catch (error) {
    console.error('Error fixing paths:', error);
  }
}

// Run the function
fixPaths();
EOL
          fi
          node fix-asset-paths.js
      
      - name: Copy CNAME
        run: |
          echo "Copying CNAME file..."
          echo "yarozsweets.com" > ./out/CNAME
      
      - name: Upload
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v2
